#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define totalCmdNum 320			// 指令总数
#define BlockNum	4			// 内存块总数

// 内存块结构体
typedef struct {
	int id;			// 物理地址
	int page;		// 页号(默认为-1)
	int keepTime;	// 在内存中驻留的时间
} Block;

int cmdNum = 0;					// 指令执行次数
int curCmd;						// 当前正在执行的指令
int isExecute[totalCmdNum];		// 判断每条指令是否执行的标志数组
double lostPage = 0;			// 缺页次数
Block blocks[BlockNum];		// 内存块指针数组

// 初始化
void init() {
	// 初始化标志数组
	for (int i = 0;i< totalCmdNum; i++)
	{
		isExecute[i]=0;
	}


	// 设置随机数种子
	srand(time(NULL));
	// 初始化内存块数组
	for (int i = 0; i < BlockNum; i++)
	{
			blocks[i].id=-1;
			blocks[i].page=-1;
			blocks[i].keepTime=0;
	}
}

// 产生指令
int genCmd() {
	//参考题目要求，也可根据自己想法设计
   //要求遍历完全部指令即可
    curCmd=rand()%320;
   while(isExecute[curCmd])
   {

       curCmd=rand()%320;


   }
   isExecute[curCmd]=1;
   return curCmd;
}
// 判断所有指令是否全部执行了一遍
int isFinish() {
	int flag = 1;
	// 遍历所有指令执行情况
	for (int i = 0; i < totalCmdNum; i++)
	{
		if(isExecute[i]==0)
        {
          flag=0;
          break;

        }
	}
	return flag;
}
// 作业调度
void dispatchJob() {
	int page = genCmd() / 10;		// 根据指令号计算页号，也可以自己设计转换方法
	int i = 0;
	int flag=0;
	int n=0;

	for (; i < BlockNum; i++) {
		// 如果访问的指令在内存中，则显示其物理地址。本实验直接模拟遍历内存，可以自己实现页表、快表，有加分
		if (page==blocks[i].page) {
			blocks[i].keepTime +=1;
			printf("指令%3d在内存块%d中\n", curCmd, blocks[i].id);
			flag =1;
			n=1;
			cmdNum++;
		}
	}

	// 如果访问的指令不在内存中
	if (flag==0) {
		int i = 0;
		for (; i < 4; i++) {			// 寻找未分配的内存块
			if (blocks[i].page==-1  ) {

				//找到后分配
				blocks[i].id=i;
				blocks[i].page=page;
				printf("指令%3d在内存块%d中\n", curCmd, blocks[i].id);
				n=1;
				cmdNum+=2;
				break;

			}
		}
	}

	// 如果所有内存块都已被分配（FIFO,LRU,NRU至少任选一种算法实现，实现多个增加得分）
	if (n==0) {
		//置换后数据内存地址
		//FIFO
		int oldestBlock=0;
		for (i=1;i<4;i++)
		{
			if (blocks[oldestBlock] .keepTime <blocks[i] .keepTime)
				oldestBlock=i;

		}
		blocks[oldestBlock].id=oldestBlock;
		blocks[oldestBlock].page=page;
		blocks[oldestBlock].keepTime =0;
		cmdNum+=3;
		lostPage +=1;
		printf("指令%3d在内存块%d中\n", curCmd, blocks[oldestBlock].id);
	}
	/*for (; i < BlockNum; i++) {
		if (blocks[i]->page != -1) {
			blocks[i]->keepTime++;		// 累计驻留时间，这里可实现你自己想做的其他逻辑
		}
	}*/
}

int main() {
	init();					// 初始化
	while (1) {
		dispatchJob();		// 作业调度
		if (isFinish()==1) {
            printf("\n*****************************\n");// 判断作业是否运行完成
			break;
		}
	}
	printf("\n共执行指令%d条\n", cmdNum);
    printf("缺页率约为:%.1lf%%\n", (lostPage / cmdNum)*100);
	return 0;
}
